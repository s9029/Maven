package services;

import java.io.IOException;
import java.sql.*;
import java.util.*;

import blazej.kwidzinski.mpr.wypozyczalniaaut.*;


public class AutoDBManager {

	private Connection conn;
	private Statement stmt;
	private PreparedStatement addAutoStmt;
	private PreparedStatement getAutoStmt;
	private PreparedStatement deleteAllAutoStmt;
	private PreparedStatement findAutoByModelStmt;
	private PreparedStatement deleteAutoStmt;

	List<Integer> listID = new ArrayList<Integer>();

	public AutoDBManager() {
		try {
			Properties props = new Properties();

			try {
				props.load(ClassLoader
						.getSystemResourceAsStream("mydb.properties"));
			} catch (IOException e) {
				e.printStackTrace();
			}

			conn = DriverManager.getConnection(props.getProperty("url"));

			stmt = conn.createStatement();
			boolean AutoTableExists = false;

			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);

			while (rs.next()) {
				if ("cars".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					AutoTableExists = true;
					break;
				}
			}

			if (!AutoTableExists) {
				stmt.executeUpdate("CREATE TABLE cars(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
						+ "model varchar(40), price int)");
			}

			addAutoStmt = conn
					.prepareStatement("INSERT INTO cars (model, price) VALUES (?, ?)");

			getAutoStmt = conn.prepareStatement("SELECT * FROM cars");

			deleteAllAutoStmt = conn.prepareStatement("DELETE FROM cars");

			findAutoByModelStmt = conn
					.prepareStatement("SELECT id FROM cars WHERE model= ?");

			deleteAutoStmt = conn
					.prepareStatement("DELETE FROM cars WHERE id = ?");
		} catch (SQLException e) {

			e.printStackTrace();
		}
	}

	public void addAuto(Auto auto) {
		try {
			addAutoStmt.setString(1, auto.getModel());
			addAutoStmt.setFloat(2, auto.getPrice());

			addAutoStmt.executeUpdate();
		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

	public List<Auto> getAllAuto() {
		List<Auto> myAutoList = new ArrayList<Auto>();
		try {
			ResultSet rs = getAutoStmt.executeQuery();
			while (rs.next()) {
				myAutoList.add(new Auto(rs.getString("model"), rs.getFloat("price")));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return myAutoList;
	}

	public void deleteAllCars() {
		try {
			deleteAllAutoStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public List<Integer> findAutoByModel(String name) {
		try {
			List<Integer> myAutoIDList = new ArrayList<Integer>();
			findAutoByModelStmt.setString(1, name);
			ResultSet rs = findAutoByModelStmt.executeQuery();
			while (rs.next())
				myAutoIDList.add(rs.getInt("ID"));
			return myAutoIDList;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public void deleteAuto(List<Integer> myAutoList) {
		try {
			for (Integer id : myAutoList) {
				deleteAutoStmt.setInt(1, id);
				deleteAutoStmt.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

}