package services;

import java.io.IOException;
import java.sql.*;
import java.util.*;

import sala.patryk.projekt.wypozyczalniavideo.*;;

public class CustomerDBManager {

	List<Integer> listID = new ArrayList<Integer>();

	private Connection conn;
	private Statement stmt;
	private PreparedStatement addCustomerStmt;
	private PreparedStatement getCustomerStmt;
	private PreparedStatement deleteAllCustomersStmt;
	private PreparedStatement deleteCustomerStmt;
	private PreparedStatement findCustomerByNameStmt;

	public CustomerDBManager() {
		try {
			Properties props = new Properties();

			try {
				props.load(ClassLoader
						.getSystemResourceAsStream("mydb.properties"));
			} catch (IOException e) {
				e.printStackTrace();
			}

			conn = DriverManager.getConnection(props.getProperty("url"));

			stmt = conn.createStatement();
			boolean CustomerTableExists = false;

			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);

			while (rs.next()) {
				if ("Customer".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					CustomerTableExists = true;
					break;
				}
			}

			if (!CustomerTableExists) {
				stmt.executeUpdate("CREATE TABLE customer(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
						+ "name varchar(40), money float)");
			}

			addCustomerStmt = conn
					.prepareStatement("INSERT INTO customer (name, money) VALUES (?,?)");

			getCustomerStmt = conn.prepareStatement("SELECT * FROM customer");

			deleteAllCustomersStmt = conn
					.prepareStatement("DELETE FROM customer");

			findCustomerByNameStmt = conn
					.prepareStatement("SELECT id FROM customer WHERE name = ?");

			deleteCustomerStmt = conn
					.prepareStatement("DELETE FROM customer WHERE id = ?");

		} catch (SQLException e) {

			e.printStackTrace();
		}
	}

	public void addCustomer(Customer customer) {
		try {
			addCustomerStmt.setString(1, customer.getName());
			addCustomerStmt.setFloat(2, customer.getCash());
			addCustomerStmt.executeUpdate();
		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

	public List<Customer> getAllCustomers() {
		List<Customer> CustomerList = new ArrayList<Customer>();

		try {
			ResultSet rs = getCustomerStmt.executeQuery();

			while (rs.next()) {
				try{
				CustomerList.add(new Customer(rs.getString("name"), rs
						.getFloat("money")));
				}
				catch(InvalidMoneyAmountValue ex){
					ex.getMessage();
				}
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return CustomerList;
	}

	public void deleteAllCustomers() {
		try {
			deleteAllCustomersStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public List<Integer> findCustomerByName(String name) {
		try {
			List<Integer> result = new ArrayList<Integer>();
			findCustomerByNameStmt.setString(1, name);
			ResultSet rs = findCustomerByNameStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public void deleteCustomer(List<Integer> list) {
		try {
			for (Integer id : list) {
				deleteCustomerStmt.setInt(1, id);
				deleteCustomerStmt.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	// klasa anonimowa 
	public void printCustomerWithCondition(List<Customer> CustomerList,
			Condition condition) {
		for (Customer customer : CustomerList) {
			if (condition.getCondition(customer)) {
				System.out.println("Name: " + customer.getName()
						+ "\tCash: " + customer.getCash());
			}
		}
	}

}